version: '3.8'

services:
  db:
    image: postgres:16-alpine
    container_name: canvas_db
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env.db
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["default", "dev", "test"] # Available in all profiles

  neo4j:
    image: neo4j:5-community
    container_name: canvas_neo4j
    restart: unless-stopped
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    env_file:
      - .env.db
    environment:
      NEO4J_AUTH: ${NEO4J_USER}/${NEO4J_PASSWORD} # Default user/password, change in production!
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles: ["default", "dev", "test"] # Available in all profiles

  api:
    container_name: canvas_api
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - ./apps/api/.env
      - .env.db # Provide DB credentials to API
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    volumes:
      - ./apps/api:/app # Mount local code for development
    profiles: ["default", "dev"] # Run by default and in dev profile

  web:
    container_name: canvas_web
    build:
      context: ./apps/web
      dockerfile: Dockerfile # Assumes a Dockerfile exists or will be created
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Point frontend to the backend API service within Docker network
      NEXT_PUBLIC_API_BASE_URL: http://api:8000/api/v1
      # Ensure NEXT_PUBLIC variables are passed during build time if needed
      # Or use runtime environment variables if Dockerfile supports it
    depends_on:
      - api
    volumes:
      - ./apps/web:/app # Mount local code for development
      - /app/node_modules # Don't mount local node_modules
      - /app/.next # Don't mount local .next build cache
    profiles: ["default", "dev"] # Run by default and in dev profile

  # Service to run backend tests (unit & integration)
  backend-tester:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    command: ["pytest", "-v", "--cov=.", "--cov-report=xml:coverage.xml"]
    env_file:
      - ./apps/api/.env # Use base env, ensure API keys are set or mocked
      - .env.db
    environment:
      # Point to the actual DB and Neo4j services for integration tests
      # Note: conftest.py currently uses SQLite for unit tests, which is fine.
      # Integration tests (like test_graph_service) might need these.
      POSTGRES_DSN: "postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
      NEO4J_URI: "neo4j://neo4j:7687"
      NEO4J_USERNAME: "${NEO4J_USER}"
      NEO4J_PASSWORD: "${NEO4J_PASSWORD}"
      # Indicate testing mode if needed by the application logic
      # TESTING_MODE: "true"
    depends_on:
      db:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    volumes:
      - ./apps/api:/app # Mount code to run tests from
    profiles: ["test"] # Only run when 'test' profile is active

  # Service to run frontend tests
  frontend-tester:
    build:
      context: ./apps/web
      dockerfile: Dockerfile # Assumes Dockerfile can run tests
    # Command to run Jest tests
    # Use `npm run test -- --watchAll=false` for non-interactive CI environments
    command: ["npm", "run", "test", "--", "--watchAll=false", "--coverage"]
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    profiles: ["test"] # Only run when 'test' profile is active

volumes:
  postgres_data:
  neo4j_data:

